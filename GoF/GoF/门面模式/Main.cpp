#include "Facade.h"
/*
1.为什么需要门面模式
	我是一个辛苦一辈子的农民，攒了几十年钱，现在日子好了，也想建一套属于自己的小洋楼；
首先，我要雇一个搬砖的和一个和泥的，还要一个会砌墙的人；可是我到哪里去找这些人，还要一个一个跟他们谈价钱；不知道他们和不和得来，会不会干一半不干了；
哎，好烦；
要是有一个人什么都会就好，我只要跟他谈，他一个人就能帮我把房子建好； 
总之，我就是想省心； 

2.概念
	提供一个统一的接口去访问多个子系统的多个不同的接口，它为子系统中的一组接口提供一个统一的
高层接口。使子系统更容易使用
本质:就是化零为整；引入一个中介类，把各个分散的功能组合成一个整体，只对外暴露一个统一的接口

3.目的
	为用户使用方便，把过度拆分的分赛功能，组合成一个整体，对外提供一个统一的接口

4.解决方案
	引入一个第三方中介类，这个类集合了多个零件部类的功能，实际功能则委托给这些零部件对象。
这个类只是作为对外的统一接口，只是一个马甲

5.优点
	松耦合:用户与子系统解耦，屏蔽子系统；可以提高子系统的独立性
	使用简单:
		简化用户与子系统的依赖关系
		用户只与门面对接，有统一的入口；不需要知道所有子系统及内部构造
6.缺点
	不规范的编程方式
	没有面向抽象编程；只是通过增加中介层，转换服务提供方的服务接口
*/
int main()
{
	Facade * m_facade = new Facade();
	m_facade->Activate();
	std::cout << "直播中!" << std::endl;
	m_facade->Deactivate();
	getchar();
	return 0;
}